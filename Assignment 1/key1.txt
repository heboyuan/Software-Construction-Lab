Exercise 1.1
2. C-s P U M-f
3. C-s L a M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. shown above
9. shown above
10. C-x C-c

Exercise 1.2
2. M-g M-g 1 8 Enter C-k
3. C-s D E C-a C-k
4. C-s < ! C-a M-z > M-z >
5. C-s < ! C-b C-b  M-z >
   C-s < ! C-a C-k

Exercise 1.3
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 3 7 Enter y y Enter
3. M-< M-% U T F - 8 Enter U S - A C I I Enter y Enter
4. M-< C-s < / o l C-a C-o
5. C-x C-c y

Exercise 1.4
3. M-> C-r < C-SP C-e M-w M-g M-g 353 Enter C-y
4. M-> C-r - < p C-f C-SP C-e M-w M-g M-g 338 Enter C-y C-k
   M-> C-r < ! - - SP Y C-SP C-n C-n C-e M-w M-g M-g 303 Enter C-y
   M-> C-r < ! - - SP D C-SP C-e M-w M-g M-g 93 Enter C-y
   M-> C-r < ! - - SP d i C-SP C-e M-w M-g M-g 18 Enter C-y
5. C-s - - - C-a C-SP M-> C-w
6. C-x u
7. C-r - - - SP Enter < ! - - M-> - - >
8. M-< M-% < o l > Enter < O l > Enter !
   there are 7 <ol>

Exercise 1.5
1. M-x m k d i r Enter j u n k Enter
2. C-x C-f j Tab h e l l o . c Enter
   (Copy and Paste the code)
   C-x C-s
3. M-x c o m p i l e Enter M-0 C-k g c c SP h e l l o . c SP - o SP h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! .  / h e l l o
5. 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
   C-x h M-w C-x C-f k e y 1 . t x t Enter M-> C-y

Exercise 1.6
1. C-x b Enter
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) )
   ( s e t q SP y SP ( r a n d o m ) ) 
4. ( * SP x SP y )
   x is -143253956642623965 and y is 933431221473493123, the result I get is 979160162244713449, which is incorrect since negative number times positive number should get another negative number.
5.M-: e v a l  - e x p r e s s i o n ( * x y) Enter
   The output is Trailing garbage following expression
6. the number is not truly random, they are pseudo-random number generated by a initial seed. For a given seed, the it will always generate the same list of random number. Besides, there doesn’t exist a range for truly random number; however, this obviously is not the case.
7.from the emacs manual, we know that the range is -2^61 to 2^61-1.
suppose the first random number is n, then for the second random number, the number of positive numbers that will cause overflow is 2^61-2^61/n, and the number of negative numbers that will cause overflow is also 2^61 - 2^61/n. Then probability of a second random number times first random number that will cause overflow is 1/2^62*(2^62-2^62/n). 
For any first random number n, the probability of overflow is 1/2^62*(2^62-2^62/n)*1/2^62*2. Do the calculation for n from 2 to 2^61-1 and from -1 to -2^61 (since 0 and 1 won’t cause overflow) and plus the result together, we will get the result. 
